{
  "securityRequirement": [
    {
      "basic": []
    }
  ],
  "externalDocs": {
    "url": "http://candlepinproject.org/",
    "description": "Project website: "
  },
  "swagger": "2.0",
  "info": {
    "title": "Candlepin",
    "version": "2.0.13",
    "description": "Candlepin is subscription management server written in Java. It helps with management of software subscriptions."
  },
  "basePath": "/candlepin",
  "tags": [
    {
      "name": "pools"
    },
    {
      "name": "serials"
    },
    {
      "name": "activation_keys"
    },
    {
      "name": "entitlements"
    },
    {
      "name": "consumers"
    },
    {
      "name": "environments"
    },
    {
      "name": "jobs"
    },
    {
      "name": "hypervisors"
    },
    {
      "name": "events"
    },
    {
      "name": "status"
    },
    {
      "name": "products"
    },
    {
      "name": "owners"
    },
    {
      "name": "roles"
    },
    {
      "name": "distributor_versions"
    },
    {
      "name": "admin"
    },
    {
      "name": "users"
    },
    {
      "name": "atom"
    },
    {
      "name": "content"
    },
    {
      "name": "deleted_consumers"
    },
    {
      "name": "cdn"
    },
    {
      "name": "consumertypes"
    },
    {
      "name": "rules"
    },
    {
      "name": "crl"
    },
    {
      "name": "subscriptions"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/users/{username}/roles": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Role"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "username"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getUserRoles",
        "description": "Retrieves a list of Roles by User",
        "summary": "getUserRoles",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{username}/owners": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Owner"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "username"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "listUsersOwners",
        "description": "Retrieve a list of owners the user can register systems to. Previously this represented owners the user was an admin for. Because the client uses this API call to list the owners a user can register to, when we introduced 'my systems' administrator, we have to change its meaning to listing the owners that can be registered to by default to maintain compatability with released clients.",
        "summary": "listUsersOwners",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{username}": {
      "delete": {
        "responses": {
          "410": {
            "description": ""
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "username"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "deleteUser",
        "description": "Removes a User",
        "summary": "deleteUser",
        "tags": [
          "users"
        ]
      },
      "put": {
        "responses": {
          "404": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/User"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "username"
          },
          {
            "schema": {
              "$ref": "#/definitions/User"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "updateUser",
        "description": "Updates a User",
        "summary": "updateUser",
        "tags": [
          "users"
        ]
      },
      "get": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/User"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "username"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getUserInfo",
        "description": "Retrieves a single User",
        "summary": "getUserInfo",
        "tags": [
          "users"
        ]
      }
    },
    "/users": {
      "post": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/User"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/User"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "createUser",
        "description": "Creates a User",
        "summary": "createUser",
        "tags": [
          "users"
        ]
      },
      "get": {
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/User"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "operationId": "list",
        "description": "Retrieves a list of Users",
        "summary": "list",
        "tags": [
          "users"
        ]
      }
    },
    "/subscriptions/{subscription_id}/cert": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/SubscriptionsCertificate"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "subscription_id"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "text/plain",
          "application/json"
        ],
        "operationId": "getSubCert",
        "description": "Retrieves a Subscription Certificate",
        "summary": "getSubCert",
        "tags": [
          "subscriptions"
        ]
      }
    },
    "/subscriptions/{subscription_id}": {
      "delete": {
        "responses": {
          "400": {
            "description": ""
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "subscription_id"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "deleteSubscription",
        "description": "Removes a Subscription",
        "summary": "deleteSubscription",
        "tags": [
          "subscriptions"
        ]
      },
      "get": {
        "responses": {
          "400": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Subscription"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "subscription_id"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "getSubscription",
        "description": "Retrieves a single Subscription",
        "summary": "getSubscription",
        "tags": [
          "subscriptions"
        ]
      }
    },
    "/subscriptions": {
      "post": {
        "responses": {
          "503": {
            "description": ""
          },
          "202": {
            "description": ""
          },
          "400": {
            "description": ""
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "consumer_uuid"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "email"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "email_locale"
          }
        ],
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "operationId": "activateSubscription",
        "description": "Activates a Subscription",
        "summary": "activateSubscription",
        "tags": [
          "subscriptions"
        ]
      },
      "get": {
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Subscription"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "getSubscriptions",
        "description": "Retrieves a list of Subscriptions",
        "summary": "getSubscriptions",
        "tags": [
          "subscriptions"
        ]
      }
    },
    "/status": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/status"
            },
            "description": "successful operation"
          }
        },
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "operationId": "status",
        "description": "Returns status of the server",
        "summary": "Status",
        "tags": [
          "status"
        ]
      }
    },
    "/serials/{serial_id}": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/CertificateSerial"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "format": "int64",
            "type": "integer",
            "required": true,
            "in": "path",
            "name": "serial_id"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getCertificateSerial",
        "description": "Retrieves single Certificate Serial",
        "summary": "getCertificateSerial",
        "tags": [
          "serials"
        ]
      }
    },
    "/serials": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/CertificateSerial"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "operationId": "getCertificateSerials",
        "description": "Retrieves a list of Certificate Serials",
        "summary": "getCertificateSerials",
        "tags": [
          "serials"
        ]
      }
    },
    "/rules": {
      "delete": {
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "operationId": "delete",
        "description": "Removes the Rules  Deletes any uploaded rules, uses bundled rules instead",
        "summary": "delete",
        "tags": [
          "rules"
        ]
      },
      "post": {
        "responses": {
          "400": {
            "description": ""
          },
          "200": {
            "schema": {
              "type": "string"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "produces": [
          "text/plain",
          "application/json"
        ],
        "consumes": [
          "application/json",
          "text/plain"
        ],
        "operationId": "upload",
        "description": "Uploads the Rules Returns a copy of the uploaded rules.",
        "summary": "upload",
        "tags": [
          "rules"
        ]
      },
      "get": {
        "responses": {
          "503": {
            "description": ""
          },
          "200": {
            "schema": {
              "type": "string"
            },
            "description": "successful operation"
          }
        },
        "parameters": [],
        "produces": [
          "application/json",
          "text/plain"
        ],
        "operationId": "get",
        "description": "Retrieves the Rules",
        "summary": "get",
        "tags": [
          "rules"
        ]
      }
    },
    "/roles/{role_id}/users/{username}": {
      "delete": {
        "responses": {
          "404": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Role"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "role_id"
          },
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "username"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "deleteUser",
        "description": "Removes a User from a Role",
        "summary": "deleteUser",
        "tags": [
          "roles"
        ]
      },
      "post": {
        "responses": {
          "404": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Role"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "role_id"
          },
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "username"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "operationId": "addUser",
        "description": "Adds a User to a Role",
        "summary": "addUser",
        "tags": [
          "roles"
        ]
      }
    },
    "/roles/{role_id}/permissions/{perm_id}": {
      "delete": {
        "responses": {
          "404": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Role"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "role_id"
          },
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "perm_id"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "removeRolePermission",
        "description": "Removes a Permission from a Role. Returns the updated Role.",
        "summary": "removeRolePermission",
        "tags": [
          "roles"
        ]
      }
    },
    "/roles/{role_id}/permissions": {
      "post": {
        "responses": {
          "404": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Role"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "role_id"
          },
          {
            "schema": {
              "$ref": "#/definitions/PermissionBlueprint"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "addRolePermission",
        "description": "Adds a Permission to a Role. Returns the updated Role.",
        "summary": "addRolePermission",
        "tags": [
          "roles"
        ]
      }
    },
    "/roles/{role_id}": {
      "delete": {
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "role_id"
          }
        ],
        "produces": [
          "*/*"
        ],
        "operationId": "deleteRole",
        "description": "Removes a Role",
        "summary": "deleteRole",
        "tags": [
          "roles"
        ]
      },
      "put": {
        "responses": {
          "404": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Role"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "role_id"
          },
          {
            "schema": {
              "$ref": "#/definitions/Role"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "updateRole",
        "description": "Updates a Role.  To avoid race conditions, we do not support updating the user or permission collections. Currently this call will only update the role name. See the specific nested POST/DELETE calls for modifying users and permissions.",
        "summary": "updateRole",
        "tags": [
          "roles"
        ]
      },
      "get": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Role"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "role_id"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getRole",
        "description": "Retrieves a single Role",
        "summary": "getRole",
        "tags": [
          "roles"
        ]
      }
    },
    "/roles": {
      "post": {
        "responses": {
          "404": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Role"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Role"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "createRole",
        "description": "Creates a Role",
        "summary": "createRole",
        "tags": [
          "roles"
        ]
      },
      "get": {
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Role"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "operationId": "getRoles",
        "description": "Retrieves a list of Roles",
        "summary": "getRoles",
        "tags": [
          "roles"
        ]
      }
    },
    "/products/{product_uuid}/content/{content_id}": {
      "delete": {
        "deprecated": true,
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "product_uuid"
          },
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "content_id"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "removeContent",
        "description": "Removes Content from a Product @deprecated Use per-org version",
        "summary": "removeContent",
        "tags": [
          "products"
        ]
      },
      "post": {
        "deprecated": true,
        "tags": [
          "products"
        ],
        "summary": "addContent",
        "description": "Adds Content to a Product. Single mode @deprecated Use per-org version",
        "operationId": "addContent",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "product_uuid"
          },
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "content_id"
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "enabled"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Product"
            },
            "description": "successful operation"
          }
        }
      }
    },
    "/products/{product_uuid}/certificate": {
      "get": {
        "responses": {
          "404": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/cert"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "product_uuid"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getProductCertificate",
        "description": "Retreives a Certificate for a Product",
        "summary": "getProductCertificate",
        "tags": [
          "products"
        ]
      }
    },
    "/products/{product_uuid}/batch_content": {
      "post": {
        "deprecated": true,
        "tags": [
          "products"
        ],
        "summary": "addBatchContent",
        "description": "Adds Content to a Product Batch mode @deprecated Use per-org version",
        "operationId": "addBatchContent",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "product_uuid"
          },
          {
            "schema": {
              "additionalProperties": {
                "type": "boolean"
              },
              "type": "object"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Product"
            },
            "description": "successful operation"
          }
        }
      }
    },
    "/products/{product_uuid}": {
      "delete": {
        "deprecated": true,
        "responses": {
          "404": {
            "description": ""
          },
          "400": {
            "description": ""
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "product_uuid"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "deleteProduct",
        "description": "Removes a Product @deprecated Use per-org version",
        "summary": "deleteProduct",
        "tags": [
          "products"
        ]
      },
      "put": {
        "deprecated": true,
        "tags": [
          "products"
        ],
        "summary": "updateProduct",
        "description": "Updates a Product @deprecated Use per-org version",
        "operationId": "updateProduct",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "product_uuid"
          },
          {
            "schema": {
              "$ref": "#/definitions/Product"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "responses": {
          "400": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Product"
            },
            "description": "successful operation"
          }
        }
      },
      "get": {
        "responses": {
          "404": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Product"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "product_uuid"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getProduct",
        "description": "Retrieves a single Product",
        "summary": "getProduct",
        "tags": [
          "products"
        ]
      }
    },
    "/products/subscriptions": {
      "put": {
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/JobDetail"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            },
            "type": "array",
            "required": false,
            "in": "query",
            "name": "product"
          },
          {
            "default": true,
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "lazy_regen"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "operationId": "refreshPoolsForProduct",
        "description": "Refreshes Pools by Product",
        "summary": "refreshPoolsForProduct",
        "tags": [
          "products"
        ]
      }
    },
    "/products/owners": {
      "get": {
        "responses": {
          "400": {
            "description": ""
          },
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Owner"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            },
            "type": "array",
            "required": false,
            "in": "query",
            "name": "product"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getProductOwners",
        "description": "Retrieves a list of Owners by Product",
        "summary": "getProductOwners",
        "tags": [
          "products"
        ]
      }
    },
    "/products": {
      "post": {
        "deprecated": true,
        "tags": [
          "products"
        ],
        "summary": "createProduct",
        "description": "Creates a Product. Returns either the new created Product or the Product that already existed. @deprecated Use per-org version",
        "operationId": "createProduct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Product"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Product"
            },
            "description": "successful operation"
          }
        }
      }
    },
    "/pools/{pool_id}/entitlements": {
      "get": {
        "responses": {
          "400": {
            "description": ""
          },
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Entitlement"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "pool_id"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getPoolEntitlements",
        "description": "Retrieve a list of Entitlements for a Pool",
        "summary": "getPoolEntitlements",
        "tags": [
          "pools"
        ]
      }
    },
    "/pools/{pool_id}/cdn": {
      "get": {
        "responses": {
          "400": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Cdn"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "pool_id"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getPoolCdn",
        "description": "Retrieve a CDN for a Pool",
        "summary": "getPoolCdn",
        "tags": [
          "pools"
        ]
      }
    },
    "/pools/{pool_id}": {
      "delete": {
        "responses": {
          "404": {
            "description": "if the pool with the specified id is not found"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "pool_id"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "deletePool",
        "description": "Remove a Pool",
        "summary": "deletePool",
        "tags": [
          "pools"
        ]
      },
      "get": {
        "responses": {
          "404": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/pool"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "pool_id"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "consumer"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "activeon"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getPool",
        "description": "Retrieves a single Pool",
        "summary": "getPool",
        "tags": [
          "pools"
        ]
      }
    },
    "/pools": {
      "get": {
        "deprecated": true,
        "responses": {
          "404": {
            "description": "if a specified consumer(unit) or owner is not found"
          },
          "403": {
            "description": ""
          },
          "400": {
            "description": "if both consumer(unit) and owner are given, or if a product id is specified without a consumer(unit) or owner"
          },
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/pool"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "owner"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "consumer"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "product"
          },
          {
            "default": false,
            "type": "boolean",
            "required": false,
            "description": "Use with consumerUuid to list all pools available to the consumer. This will include pools which would otherwise be omitted due to a rules warning. (i.e. not recommended) Pools that trigger an error however will still be omitted. (no entitlements available, consumer type mismatch, etc)",
            "in": "query",
            "name": "listall"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "activeon"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "list",
        "description": "Retrieves a list of Pools @deprecated Use the method on /owners",
        "summary": "",
        "tags": [
          "pools"
        ]
      }
    },
    "/owners/{owner_key}/upstream_consumers": {
      "get": {
        "responses": {
          "404": {
            "description": "Owner not found"
          },
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/UpstreamConsumer"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getUpstreamConsumers",
        "description": " Retrieves a list of Upstream Consumers for an Owner",
        "summary": "Get Upstream Consumers",
        "tags": [
          "owners"
        ]
      }
    },
    "/owners/{owner_key}/uebercert": {
      "post": {
        "responses": {
          "404": {
            "description": "Owner not found"
          },
          "400": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/cert"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "createUeberCertificate",
        "description": "Creates an Ueber Entitlement Certificate",
        "summary": "Create Ueber Entitlement Certificate",
        "tags": [
          "owners"
        ]
      },
      "get": {
        "responses": {
          "404": {
            "description": "Owner not found"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/cert"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getUeberCertificate",
        "description": "Retrieves the Ueber Entitlement Certificate",
        "summary": "Get Ueber Entitlement Certificate",
        "tags": [
          "owners"
        ]
      }
    },
    "/owners/{owner_key}/subscriptions": {
      "put": {
        "responses": {
          "404": {
            "description": "Owner not found"
          },
          "202": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/JobDetail"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          },
          {
            "default": false,
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "auto_create_owner"
          },
          {
            "default": true,
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "lazy_regen"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "operationId": "refreshPools",
        "description": "Tickle an owner to have all of their entitlement pools synced with their subscriptions. This method (and the one below may not be entirely RESTful, as the updated data is not supplied as an argument. This API call is only relevant in a top level hosted deployment where subscriptions and products are sourced from adapters. Calling this in an on-site deployment is just a no-op.",
        "summary": "Update Subscription",
        "tags": [
          "owners"
        ]
      },
      "post": {
        "deprecated": true,
        "tags": [
          "owners"
        ],
        "summary": "Create Subscription",
        "description": "Creates a Subscription for an Owner DEPRECATED: Please create pools directly with POST /pools.",
        "operationId": "createSubscription",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          },
          {
            "schema": {
              "$ref": "#/definitions/Subscription"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "responses": {
          "404": {
            "description": "Owner not found"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Subscription"
            },
            "description": "successful operation"
          }
        }
      },
      "get": {
        "responses": {
          "404": {
            "description": "Owner not found"
          },
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Subscription"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "getSubscriptions",
        "description": "Retrieves a list of Subscriptions for an Owner",
        "summary": "List Subscriptions",
        "tags": [
          "owners"
        ]
      }
    },
    "/owners/{owner_key}/servicelevels": {
      "get": {
        "responses": {
          "404": {
            "description": "Owner not found"
          },
          "200": {
            "schema": {
              "items": {
                "type": "string"
              },
              "uniqueItems": true,
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "description": "ownerKey id of the owner whose support levels are sought.",
            "in": "path",
            "name": "owner_key"
          },
          {
            "default": "false",
            "type": "string",
            "required": false,
            "in": "query",
            "name": "exempt"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "ownerServiceLevels",
        "description": "Retrieves a list of Support Levels for an Owner",
        "summary": "Get Service Levels",
        "tags": [
          "owners"
        ]
      }
    },
    "/owners/{owner_key}/products/{product_id}/subscriptions": {
      "put": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/JobDetail"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          },
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "product_id"
          },
          {
            "default": true,
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "lazy_regen"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "operationId": "refreshPoolsForProduct",
        "description": "Refreshes Pools by Product",
        "summary": "refreshPoolsForProduct",
        "tags": [
          "owners"
        ]
      }
    },
    "/owners/{owner_key}/products/{product_id}/content/{content_id}": {
      "delete": {
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          },
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "product_id"
          },
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "content_id"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "removeContent",
        "description": "Removes Content from a Product",
        "summary": "removeContent",
        "tags": [
          "owners"
        ]
      },
      "post": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Product"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          },
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "product_id"
          },
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "content_id"
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "enabled"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "operationId": "addContent",
        "description": "Adds Content to a Product  Single mode",
        "summary": "addContent",
        "tags": [
          "owners"
        ]
      }
    },
    "/owners/{owner_key}/products/{product_id}/certificate": {
      "get": {
        "responses": {
          "404": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/cert"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          },
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "product_id"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getProductCertificate",
        "description": "Retreives a Certificate for a Product",
        "summary": "getProductCertificate",
        "tags": [
          "owners"
        ]
      }
    },
    "/owners/{owner_key}/products/{product_id}/batch_content": {
      "post": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Product"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          },
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "product_id"
          },
          {
            "schema": {
              "additionalProperties": {
                "type": "boolean"
              },
              "type": "object"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "addBatchContent",
        "description": "Adds Content to a Product  Batch mode",
        "summary": "addBatchContent",
        "tags": [
          "owners"
        ]
      }
    },
    "/owners/{owner_key}/products/{product_id}": {
      "delete": {
        "responses": {
          "404": {
            "description": ""
          },
          "400": {
            "description": ""
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          },
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "product_id"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "deleteProduct",
        "description": "Removes a Product",
        "summary": "deleteProduct",
        "tags": [
          "owners"
        ]
      },
      "put": {
        "responses": {
          "400": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Product"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          },
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "product_id"
          },
          {
            "schema": {
              "$ref": "#/definitions/Product"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "updateProduct",
        "description": "Updates a Product",
        "summary": "updateProduct",
        "tags": [
          "owners"
        ]
      },
      "get": {
        "responses": {
          "404": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Product"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          },
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "product_id"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getProduct",
        "description": "Retrieves a single Product",
        "summary": "getProduct",
        "tags": [
          "owners"
        ]
      }
    },
    "/owners/{owner_key}/products": {
      "post": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Product"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          },
          {
            "schema": {
              "$ref": "#/definitions/Product"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "createProduct",
        "description": "Creates a Product.  Returns either the new created Product or the Product that already existed.",
        "summary": "createProduct",
        "tags": [
          "owners"
        ]
      },
      "get": {
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Product"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          },
          {
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            },
            "type": "array",
            "required": false,
            "in": "query",
            "name": "product"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "list",
        "description": "Retrieves a list of Products",
        "summary": "list",
        "tags": [
          "owners"
        ]
      }
    },
    "/owners/{owner_key}/pools": {
      "put": {
        "responses": {
          "404": {
            "description": "Owner not found"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          },
          {
            "schema": {
              "$ref": "#/definitions/pool"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "updatePool",
        "description": "Updates a pool for an Owner. assumes this is a normal pool, and errors out otherwise cause we cannot create master pools from bonus pools TODO: while this method replaces the now deprecated updateSubsciption, it still uses it underneath. We need to re-implement the wheel like we did in createPool ",
        "summary": "Update Pool",
        "tags": [
          "owners"
        ]
      },
      "post": {
        "responses": {
          "404": {
            "description": "Owner not found"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/pool"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          },
          {
            "schema": {
              "$ref": "#/definitions/pool"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "createPool",
        "description": "Creates a custom pool for an Owner. Floating pools are not tied to any upstream subscription, and are most commonly used for custom content delivery in Satellite. Also helps in on-site deployment testing",
        "summary": "Create Pool",
        "tags": [
          "owners"
        ]
      },
      "get": {
        "responses": {
          "404": {
            "description": "Owner not found"
          },
          "400": {
            "description": "Invalid request"
          },
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/pool"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "consumer"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "activation_key"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "product"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "subscription"
          },
          {
            "default": false,
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "listall"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "activeon"
          },
          {
            "type": "string",
            "required": false,
            "description": "Find pools matching the given pattern in a variety of fields * and ? wildcards are supported.",
            "in": "query",
            "name": "matches"
          },
          {
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            },
            "type": "array",
            "required": false,
            "in": "query",
            "name": "attribute"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "listPools",
        "description": "Retrieves a list of Pools for an Owner",
        "summary": "List Pools",
        "tags": [
          "owners"
        ]
      }
    },
    "/owners/{owner_key}/log": {
      "delete": {
        "responses": {
          "404": {
            "description": "Owner not found"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "deleteLogLevel",
        "description": "Remove the Log Level of an Owner",
        "summary": "Remove Log Level",
        "tags": [
          "owners"
        ]
      },
      "put": {
        "responses": {
          "404": {
            "description": "Owner not found"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Owner"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          },
          {
            "default": "DEBUG",
            "type": "string",
            "required": false,
            "in": "query",
            "name": "level"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "operationId": "setLogLevel",
        "description": "Sets the Log Level for an Owner",
        "summary": "Set Log Level",
        "tags": [
          "owners"
        ]
      }
    },
    "/owners/{owner_key}/info": {
      "get": {
        "responses": {
          "404": {
            "description": "An owner not found"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/OwnerInfo"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getOwnerInfo",
        "description": "Retrieves the Owner Info for an Owner",
        "summary": "Get Owner Info",
        "tags": [
          "owners"
        ]
      }
    },
    "/owners/{owner_key}/imports": {
      "delete": {
        "responses": {
          "404": {
            "description": "Owner not found"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/JobDetail"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "undoImports",
        "description": "Removes Imports for an Owner. Cleans out all imported subscriptions and triggers a background refresh pools. Link to an upstream distributor is removed for the owner, so they can import from another distributor. Other owners can also now import the manifests originally used in this owner. This  call does not differentiate between any specific import, it just destroys all subscriptions with an upstream pool ID, essentially anything from an import. Custom subscriptions will be left alone. Imports do carry rules and product information which is global to the candlepin server. This import data is *not* undone, we assume that updates to this data can be safely kept. ",
        "summary": "Undo Imports",
        "tags": [
          "owners"
        ]
      },
      "post": {
        "responses": {
          "409": {
            "description": ""
          },
          "404": {
            "description": "Owner not found"
          },
          "500": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ImportRecord"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          },
          {
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            },
            "type": "array",
            "required": false,
            "in": "query",
            "name": "force"
          },
          {
            "schema": {
              "$ref": "#/definitions/MultipartInput"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "operationId": "importManifest",
        "description": "Imports a manifest zip file for the given organization. This will bring in any products, content, and subscriptions that were assigned to the distributor who generated the manifest.",
        "summary": "Import Manifest",
        "tags": [
          "owners"
        ]
      },
      "get": {
        "responses": {
          "404": {
            "description": "Owner not found"
          },
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/ImportRecord"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "getImports",
        "description": " Retrieves a list of Import Records for an Owner",
        "summary": "Get Imports",
        "tags": [
          "owners"
        ]
      }
    },
    "/owners/{owner_key}/hypervisors": {
      "get": {
        "responses": {
          "404": {
            "description": "Owner not found"
          },
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Consumer"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          },
          {
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            },
            "type": "array",
            "required": false,
            "in": "query",
            "name": "hypervisor_id"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getHypervisors",
        "description": "Retrieves a list of Hypervisors for an Owner",
        "summary": "Get Hypervisors",
        "tags": [
          "owners"
        ]
      }
    },
    "/owners/{owner_key}/events": {
      "get": {
        "responses": {
          "404": {
            "description": "Owner not found"
          },
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Event"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getEvents",
        "description": "Retrieves a list of Events for an Owner",
        "summary": "Get Events",
        "tags": [
          "owners"
        ]
      }
    },
    "/owners/{owner_key}/environments": {
      "post": {
        "responses": {
          "404": {
            "description": "Owner not found"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Environment"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          },
          {
            "schema": {
              "$ref": "#/definitions/Environment"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "createEnv",
        "description": "Creates an Environment for an Owner",
        "summary": "Create environment",
        "tags": [
          "owners"
        ]
      },
      "get": {
        "responses": {
          "404": {
            "description": "Owner not found"
          },
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Environment"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          },
          {
            "type": "string",
            "required": false,
            "description": "Environment name filter to search for.",
            "in": "query",
            "name": "name"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "listEnvironments",
        "description": "Retrieves a list of Environments for an Owner",
        "summary": "List environments",
        "tags": [
          "owners"
        ]
      }
    },
    "/owners/{owner_key}/entitlements": {
      "post": {
        "responses": {
          "404": {
            "description": "Owner not found"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/JobDetail"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "description": "ownerKey id of the owner to be healed.",
            "in": "path",
            "name": "owner_key"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "operationId": "healEntire",
        "description": "Starts an asynchronous healing for the given Owner. At the end of the process the idea is that all of the consumers in the owned by the Owner will be up to date.",
        "summary": "Heal owner",
        "tags": [
          "owners"
        ]
      },
      "get": {
        "responses": {
          "404": {
            "description": "Owner not found"
          },
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Entitlement"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "product"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "matches"
          },
          {
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            },
            "type": "array",
            "required": false,
            "in": "query",
            "name": "attribute"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "ownerEntitlements",
        "description": "Retrieves the list of Entitlements for an Owner",
        "summary": "List Owner Entitlements",
        "tags": [
          "owners"
        ]
      }
    },
    "/owners/{owner_key}/content/{content_id}": {
      "delete": {
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          },
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "content_id"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "remove",
        "description": "Deletes a Content",
        "summary": "remove",
        "tags": [
          "owners"
        ]
      },
      "put": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Content"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          },
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "content_id"
          },
          {
            "schema": {
              "$ref": "#/definitions/Content"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "updateContent",
        "description": "Updates a Content",
        "summary": "updateContent",
        "tags": [
          "owners"
        ]
      },
      "get": {
        "responses": {
          "400": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Content"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          },
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "content_id"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getContent",
        "description": "Retrieves a single Content",
        "summary": "getContent",
        "tags": [
          "owners"
        ]
      }
    },
    "/owners/{owner_key}/content/batch": {
      "post": {
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Content"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          },
          {
            "schema": {
              "items": {
                "$ref": "#/definitions/Content"
              },
              "type": "array"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "createBatchContent",
        "description": "Creates Contents in bulk",
        "summary": "createBatchContent",
        "tags": [
          "owners"
        ]
      }
    },
    "/owners/{owner_key}/content": {
      "post": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Content"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          },
          {
            "schema": {
              "$ref": "#/definitions/Content"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "createContent",
        "description": "Creates a Content",
        "summary": "createContent",
        "tags": [
          "owners"
        ]
      },
      "get": {
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Content"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "list",
        "description": "Retrieves list of Content",
        "summary": "list",
        "tags": [
          "owners"
        ]
      }
    },
    "/owners/{owner_key}/consumers": {
      "get": {
        "responses": {
          "404": {
            "description": "Owner not found"
          },
          "400": {
            "description": "Invalid request"
          },
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Consumer"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "username"
          },
          {
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            },
            "type": "array",
            "required": false,
            "in": "query",
            "name": "type"
          },
          {
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            },
            "type": "array",
            "required": false,
            "in": "query",
            "name": "uuid"
          },
          {
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            },
            "type": "array",
            "required": false,
            "in": "query",
            "name": "hypervisor_id"
          },
          {
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            },
            "type": "array",
            "required": false,
            "in": "query",
            "name": "fact"
          },
          {
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            },
            "type": "array",
            "required": false,
            "in": "query",
            "name": "sku"
          },
          {
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            },
            "type": "array",
            "required": false,
            "in": "query",
            "name": "subscription_id"
          },
          {
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            },
            "type": "array",
            "required": false,
            "in": "query",
            "name": "contract"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "listConsumers",
        "description": "Retrieve a list of Consumers for the Owner",
        "summary": "List Consumers",
        "tags": [
          "owners"
        ]
      }
    },
    "/owners/{owner_key}/atom": {
      "get": {
        "responses": {
          "404": {
            "description": "Owner not found"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/feed"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          }
        ],
        "produces": [
          "application/atom+xml"
        ],
        "operationId": "getOwnerAtomFeed",
        "description": "Retrieves an Event Atom Feed for an owner",
        "summary": "Get Atom Feed",
        "tags": [
          "owners"
        ]
      }
    },
    "/owners/{owner_key}/activation_keys": {
      "post": {
        "responses": {
          "404": {
            "description": "Owner not found"
          },
          "400": {
            "description": "Invalid activation key"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ActivationKey"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          },
          {
            "schema": {
              "$ref": "#/definitions/ActivationKey"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "createActivationKey",
        "description": "Creates an Activation Key for the Owner",
        "summary": "Create Activation Key",
        "tags": [
          "owners"
        ]
      },
      "get": {
        "responses": {
          "404": {
            "description": "Owner not found"
          },
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/ActivationKey"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "name"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "ownerActivationKeys",
        "description": "Retrieves a list of Activation Keys for an Owner",
        "summary": "Owner Activation Keys",
        "tags": [
          "owners"
        ]
      }
    },
    "/consumers/{consumer_uuid}/host": {
      "get": {
        "responses": {
          "404": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Consumer"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "consumer_uuid"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getHost",
        "description": "Retrieves a Host Consumer of a Consumer",
        "summary": "getHost",
        "tags": [
          "consumers"
        ]
      }
    },
    "/consumers/{consumer_uuid}/guests": {
      "get": {
        "responses": {
          "404": {
            "description": ""
          },
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Consumer"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "consumer_uuid"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getGuests",
        "description": "Retrieves a list of Guest Consumers of a Consumer",
        "summary": "getGuests",
        "tags": [
          "consumers"
        ]
      }
    },
    "/consumers/{consumer_uuid}/guestids/{guest_id}": {
      "delete": {
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "description": "consumer who owns or hosts the guest in question",
            "in": "path",
            "name": "consumer_uuid"
          },
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "guest_id"
          },
          {
            "default": false,
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "unregister"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "deleteGuest",
        "description": "Removes the Guest from the Consumer",
        "summary": "deleteGuest",
        "tags": [
          "consumers"
        ]
      },
      "put": {
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "description": "consumer who owns or hosts the guest in question",
            "in": "path",
            "name": "consumer_uuid"
          },
          {
            "type": "string",
            "required": true,
            "description": "guest virtual uuid",
            "in": "path",
            "name": "guest_id"
          },
          {
            "schema": {
              "$ref": "#/definitions/GuestId"
            },
            "required": false,
            "description": "updated guest data to use",
            "name": "body",
            "in": "body"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "updateGuest",
        "description": "Updates a single Guest on a Consumer. Allows virt-who to avoid uploading an entire list of guests",
        "summary": "updateGuest",
        "tags": [
          "consumers"
        ]
      },
      "get": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GuestId"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "consumer_uuid"
          },
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "guest_id"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getGuestId",
        "description": "Retrieves a single Guest By its consumer and the guest UUID",
        "summary": "getGuestId",
        "tags": [
          "consumers"
        ]
      }
    },
    "/consumers/{consumer_uuid}/guestids": {
      "put": {
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "consumer_uuid"
          },
          {
            "schema": {
              "items": {
                "$ref": "#/definitions/GuestId"
              },
              "type": "array"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "updateGuests",
        "description": "Updates the List of Guests on a Consumer This method should work just like updating the consumer, except that it only updates GuestIds.  Eventually we should move All the logic here, and depricate updating guests through the consumer update.",
        "summary": "updateGuests",
        "tags": [
          "consumers"
        ]
      },
      "get": {
        "responses": {
          "404": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/GuestId"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "consumer_uuid"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getGuestIds",
        "description": "Retrieves the List of a Consumer's Guests",
        "summary": "getGuestIds",
        "tags": [
          "consumers"
        ]
      }
    },
    "/consumers/{consumer_uuid}/export": {
      "get": {
        "responses": {
          "404": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "500": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/File"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "consumer_uuid"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "cdn_label"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "webapp_prefix"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "api_url"
          }
        ],
        "produces": [
          "application/zip"
        ],
        "operationId": "exportData",
        "description": "Retrieves a Compressed File representation of a Consumer",
        "summary": "exportData",
        "tags": [
          "consumers"
        ]
      }
    },
    "/consumers/{consumer_uuid}/exists": {
      "head": {
        "responses": {
          "404": {
            "description": "If the consumer doesn't exist or cannot be accessed"
          },
          "204": {
            "description": "If the consumer exists and can be accessed"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "consumer_uuid"
          }
        ],
        "produces": [
          "*/*"
        ],
        "operationId": "consumerExists",
        "description": "Checks for the existence of a Consumer. This method is used to check if a consumer is available on a particular shard.  There is no need to do a full GET for the consumer for this check.",
        "summary": "",
        "tags": [
          "consumers"
        ]
      }
    },
    "/consumers/{consumer_uuid}/events": {
      "get": {
        "responses": {
          "404": {
            "description": ""
          },
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Event"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "consumer_uuid"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getConsumerEvents",
        "description": "Retrieves a list of Consumer Events",
        "summary": "getConsumerEvents",
        "tags": [
          "consumers"
        ]
      }
    },
    "/consumers/{consumer_uuid}/entitlements/{dbid}": {
      "delete": {
        "responses": {
          "404": {
            "description": ""
          },
          "403": {
            "description": ""
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "consumer_uuid"
          },
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "dbid"
          }
        ],
        "produces": [
          "*/*"
        ],
        "operationId": "unbind",
        "description": "Removes an Entitlement from a Consumer By the Entitlement ID",
        "summary": "unbind",
        "tags": [
          "consumers"
        ]
      }
    },
    "/consumers/{consumer_uuid}/entitlements/pool/{pool_id}": {
      "delete": {
        "responses": {
          "404": {
            "description": ""
          },
          "403": {
            "description": ""
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "consumer_uuid"
          },
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "pool_id"
          }
        ],
        "produces": [
          "*/*"
        ],
        "operationId": "unbindByPool",
        "description": "Removes all Entitlements from a Consumer. By Pool Id",
        "summary": "unbindByPool",
        "tags": [
          "consumers"
        ]
      }
    },
    "/consumers/{consumer_uuid}/entitlements/dry-run": {
      "get": {
        "responses": {
          "404": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/poolquantity"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "consumer_uuid"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "service_level"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "dryBind",
        "description": "Retrieves a list of Pools and quantities that would be the result of an auto-bind. This is a dry run of an autobind. It allows the client to see what would be the result of an autobind without executing it. It can only do this for the prevously established list of installed products for the consumer If a service level is included in the request, then that level will override the one stored on the consumer. If no service level is included then the existing one will be used. The Response has a list of PoolQuantity objects",
        "summary": "dryBind",
        "tags": [
          "consumers"
        ]
      }
    },
    "/consumers/{consumer_uuid}/entitlements": {
      "delete": {
        "responses": {
          "404": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/DeleteResult"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "consumer_uuid"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "unbindAll",
        "description": "Unbinds all Entitlements for a Consumer Result contains the total number of entitlements unbound.",
        "summary": "unbindAll",
        "tags": [
          "consumers"
        ]
      },
      "post": {
        "responses": {
          "404": {
            "description": ""
          },
          "403": {
            "description": "Binds Entitlements"
          },
          "400": {
            "description": ""
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "consumer_uuid"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "pool"
          },
          {
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            },
            "type": "array",
            "required": false,
            "in": "query",
            "name": "product"
          },
          {
            "format": "int32",
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "quantity"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "email"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "email_locale"
          },
          {
            "default": false,
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "async"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "entitle_date"
          },
          {
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            },
            "type": "array",
            "required": false,
            "in": "query",
            "name": "from_pool"
          },
          {
            "schema": {
              "items": {
                "$ref": "#/definitions/PoolIdAndQuantity"
              },
              "type": "array"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "bind",
        "description": "If a pool ID is specified, we know we're binding to that exact pool. Specifying an entitle date in this case makes no sense and will throw an error. If a list of product IDs are specified, we attempt to auto-bind to subscriptions which will provide those products. An optional date can be specified allowing the consumer to get compliant for some date in the future. If no date is specified we assume the current date. If neither a pool nor an ID is specified, this is a healing request. The path is similar to the bind by products, but in this case we use the installed products on the consumer, and their current compliant status, to determine which product IDs should be requested. The entitle date is used the same as with bind by products. The Respose will contain a list of Entitlement objects if async is false, or a JobDetail object if async is true.",
        "summary": "Bind Entitlements",
        "tags": [
          "consumers"
        ]
      },
      "get": {
        "responses": {
          "404": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Entitlement"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "consumer_uuid"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "product"
          },
          {
            "default": true,
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "regen"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "matches"
          },
          {
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            },
            "type": "array",
            "required": false,
            "in": "query",
            "name": "attribute"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "listEntitlements",
        "description": "Retrives a list of Entitlements",
        "summary": "listEntitlements",
        "tags": [
          "consumers"
        ]
      }
    },
    "/consumers/{consumer_uuid}/deletionrecord": {
      "delete": {
        "responses": {
          "404": {
            "description": ""
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "consumer_uuid"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "removeDeletionRecord",
        "description": "Removes the Deletion Record for a Consumer Allowed for a superadmin. The main use case for this would be if a user accidently deleted a non-RHEL hypervisor, causing it to no longer be auto-detected via virt-who.",
        "summary": "removeDeletionRecord",
        "tags": [
          "consumers"
        ]
      }
    },
    "/consumers/{consumer_uuid}/content_overrides": {
      "delete": {
        "responses": {
          "200": {
            "headers": {},
            "schema": {
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "schema": {
              "items": {
                "$ref": "#/definitions/ContentOverride"
              },
              "type": "array"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "operationId": "deleteContentOverrides",
        "tags": [
          "consumers"
        ]
      },
      "put": {
        "responses": {
          "200": {
            "headers": {},
            "schema": {
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "schema": {
              "items": {
                "$ref": "#/definitions/ContentOverride"
              },
              "type": "array"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "operationId": "addContentOverrides",
        "tags": [
          "consumers"
        ]
      },
      "get": {
        "responses": {
          "200": {
            "headers": {},
            "schema": {
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [],
        "operationId": "getContentOverrideList",
        "tags": [
          "consumers"
        ]
      }
    },
    "/consumers/{consumer_uuid}/compliance": {
      "get": {
        "responses": {
          "404": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ComplianceStatus"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "consumer_uuid"
          },
          {
            "type": "string",
            "required": false,
            "description": "Date to get compliance information for, default is now.",
            "in": "query",
            "name": "on_date"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getComplianceStatus",
        "description": "Retireves the Compliance Status of a Consumer.",
        "summary": "getComplianceStatus",
        "tags": [
          "consumers"
        ]
      }
    },
    "/consumers/{consumer_uuid}/certificates/{serial}": {
      "delete": {
        "responses": {
          "404": {
            "description": ""
          },
          "403": {
            "description": ""
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "consumer_uuid"
          },
          {
            "format": "int64",
            "type": "integer",
            "required": true,
            "in": "path",
            "name": "serial"
          }
        ],
        "produces": [
          "*/*"
        ],
        "operationId": "unbindBySerial",
        "description": "Removes an Entitlement from a Consumer By the Certificate Serial",
        "summary": "unbindBySerial",
        "tags": [
          "consumers"
        ]
      }
    },
    "/consumers/{consumer_uuid}/certificates/serials": {
      "get": {
        "responses": {
          "404": {
            "description": ""
          },
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/serials"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "consumer_uuid"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getEntitlementCertificateSerials",
        "description": "Retrieves a list of Certiticate Serials Return the client certificate metadata a for the given consumer. This is a small subset of data clients can use to determine which certificates they need to update/fetch.",
        "summary": "getEntitlementCertificateSerials",
        "tags": [
          "consumers"
        ]
      }
    },
    "/admin/queues": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/QueueStatus"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "operationId": "getQueueStats",
        "description": "Basic information on the HornetQ queues and how many messages are pending in each.",
        "summary": "Get Queue Stats",
        "tags": [
          "admin"
        ]
      }
    },
    "/admin/init": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "type": "string"
            },
            "description": "successful operation"
          }
        },
        "parameters": [],
        "produces": [
          "text/plain"
        ],
        "operationId": "initialize",
        "description": "Initializes the Candlepin database. Currently this just creates the admin user for standalone deployments using the default user service adapter. It must be called once after candlepin is installed, repeat calls are not required, but will be harmless. The String returned is the description if the db was or already is initialized.",
        "summary": "initialize",
        "tags": [
          "admin"
        ]
      }
    },
    "/activation_keys/{activation_key_id}/product/{product_id}": {
      "delete": {
        "responses": {
          "400": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ActivationKeyData"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "activation_key_id"
          },
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "product_id"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "removeProductIdFromKey",
        "description": "Removes a Product ID from an Activation Key",
        "summary": "Remove Product Id from Key",
        "tags": [
          "activation_keys"
        ]
      },
      "post": {
        "responses": {
          "400": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ActivationKeyData"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "activation_key_id"
          },
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "product_id"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "operationId": "addProductIdToKey",
        "description": "Adds an Product ID to an Activation Key",
        "summary": "Add Product ID to key",
        "tags": [
          "activation_keys"
        ]
      }
    },
    "/activation_keys/{activation_key_id}/pools/{pool_id}": {
      "delete": {
        "responses": {
          "400": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ActivationKeyData"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "activation_key_id"
          },
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "pool_id"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "removePoolFromKey",
        "description": "Removes a Pool from an Activation Key",
        "summary": "Remove Pool From Key",
        "tags": [
          "activation_keys"
        ]
      },
      "post": {
        "responses": {
          "400": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ActivationKeyData"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "activation_key_id"
          },
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "pool_id"
          },
          {
            "format": "int64",
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "quantity"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "operationId": "addPoolToKey",
        "description": "Adds a Pool to an Activation Key",
        "summary": "Add Pool to Key",
        "tags": [
          "activation_keys"
        ]
      }
    },
    "/activation_keys/{activation_key_id}/pools": {
      "get": {
        "responses": {
          "400": {
            "description": ""
          },
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/pool"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "activation_key_id"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getActivationKeyPools",
        "description": "Retrieves a list of Pools based on the Activation Key",
        "summary": "Get Activation Key Pools",
        "tags": [
          "activation_keys"
        ]
      }
    },
    "/activation_keys/{activation_key_id}/content_overrides": {
      "delete": {
        "responses": {
          "200": {
            "headers": {},
            "schema": {
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "schema": {
              "items": {
                "$ref": "#/definitions/ContentOverride"
              },
              "type": "array"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "operationId": "deleteContentOverrides",
        "tags": [
          "activation_keys"
        ]
      },
      "put": {
        "responses": {
          "200": {
            "headers": {},
            "schema": {
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "schema": {
              "items": {
                "$ref": "#/definitions/ContentOverride"
              },
              "type": "array"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "operationId": "addContentOverrides",
        "tags": [
          "activation_keys"
        ]
      },
      "get": {
        "responses": {
          "200": {
            "headers": {},
            "schema": {
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [],
        "operationId": "getContentOverrideList",
        "tags": [
          "activation_keys"
        ]
      }
    },
    "/activation_keys/{activation_key_id}": {
      "delete": {
        "responses": {
          "400": {
            "description": ""
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "activation_key_id"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "deleteActivationKey",
        "description": "Removes an Activation Key",
        "summary": "deleteActivationKey",
        "tags": [
          "activation_keys"
        ]
      },
      "put": {
        "responses": {
          "400": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ActivationKeyData"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "activation_key_id"
          },
          {
            "schema": {
              "$ref": "#/definitions/ActivationKeyData"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "updateActivationKey",
        "description": "Updates an Activation Key",
        "summary": "Update Activation Key",
        "tags": [
          "activation_keys"
        ]
      },
      "get": {
        "responses": {
          "400": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ActivationKeyData"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "activation_key_id"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getActivationKey",
        "description": "Retrieves a single Activation Key",
        "summary": "Get Activation Key",
        "tags": [
          "activation_keys"
        ]
      }
    },
    "/activation_keys": {
      "get": {
        "responses": {
          "200": {
            "description": ""
          }
        },
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "operationId": "findActivationKey",
        "description": "Retrieves a list of Activation Keys",
        "summary": "findActivationKey",
        "tags": [
          "activation_keys"
        ]
      }
    },
    "/atom": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/feed"
            },
            "description": "successful operation"
          }
        },
        "parameters": [],
        "produces": [
          "application/atom+xml",
          "application/json"
        ],
        "operationId": "getFeed",
        "description": "Retrieves an Event Atom Feed",
        "summary": "getFeed",
        "tags": [
          "atom"
        ]
      }
    },
    "/cdn": {
      "post": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Cdn"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Cdn"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "create",
        "description": "Creates a CDN @return a Cdn object",
        "summary": "create",
        "tags": [
          "cdn"
        ]
      },
      "get": {
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Cdn"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "operationId": "getContentDeliveryNetworks",
        "description": "Retrieves a list of CDN's",
        "summary": "getContentDeliveryNetworks",
        "tags": [
          "cdn"
        ]
      }
    },
    "/cdn/{label}": {
      "delete": {
        "responses": {
          "404": {
            "description": ""
          },
          "400": {
            "description": ""
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "label"
          }
        ],
        "produces": [
          "*/*"
        ],
        "operationId": "delete",
        "description": "Removes a CDN",
        "summary": "delete",
        "tags": [
          "cdn"
        ]
      },
      "put": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Cdn"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "label"
          },
          {
            "schema": {
              "$ref": "#/definitions/Cdn"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "update",
        "description": "Updates a CDN @return a Cdn object",
        "summary": "update",
        "tags": [
          "cdn"
        ]
      }
    },
    "/consumers": {
      "post": {
        "responses": {
          "404": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Consumer"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Consumer"
            },
            "required": false,
            "name": "body",
            "in": "body"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "username"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "owner"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "activation_keys"
          },
          {
            "default": true,
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "identity_cert_creation"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "create",
        "description": "Creates a Consumer. NOTE: Opening this method up to everyone, as we have nothing we can reliably verify in the method signature. Instead we have to figure out what owner this consumer is destined for (due to backward compatability with existing clients which do not specify an owner during registration), and then check the access to the specified owner in the method itself.",
        "summary": "create",
        "tags": [
          "consumers"
        ]
      },
      "get": {
        "responses": {
          "404": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Consumer"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "username"
          },
          {
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            },
            "type": "array",
            "required": false,
            "in": "query",
            "name": "type"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "owner"
          },
          {
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            },
            "type": "array",
            "required": false,
            "in": "query",
            "name": "uuid"
          },
          {
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            },
            "type": "array",
            "required": false,
            "in": "query",
            "name": "hypervisor_id"
          },
          {
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            },
            "type": "array",
            "required": false,
            "in": "query",
            "name": "fact"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "list",
        "description": "Retrieves a list of the Consumers",
        "summary": "list",
        "tags": [
          "consumers"
        ]
      }
    },
    "/consumers/compliance": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "additionalProperties": {
                "$ref": "#/definitions/ComplianceStatus"
              },
              "type": "object"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            },
            "type": "array",
            "required": false,
            "in": "query",
            "name": "uuid"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getComplianceStatusList",
        "description": "Retrieves a Compliance Status list for a list of Consumers",
        "summary": "getComplianceStatusList",
        "tags": [
          "consumers"
        ]
      }
    },
    "/consumers/{consumer_uuid}": {
      "delete": {
        "responses": {
          "404": {
            "description": ""
          },
          "403": {
            "description": ""
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "consumer_uuid"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "deleteConsumer",
        "description": "Removes a Consumer",
        "summary": "deleteConsumer",
        "tags": [
          "consumers"
        ]
      },
      "put": {
        "responses": {
          "404": {
            "description": ""
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "consumer_uuid"
          },
          {
            "schema": {
              "$ref": "#/definitions/Consumer"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "updateConsumer",
        "description": "Updates a Consumer",
        "summary": "updateConsumer",
        "tags": [
          "consumers"
        ]
      },
      "post": {
        "responses": {
          "404": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Consumer"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "consumer_uuid"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "operationId": "regenerateIdentityCertificates",
        "description": "Retrieves a single Consumer",
        "summary": "regenerateIdentityCertificates",
        "tags": [
          "consumers"
        ]
      },
      "get": {
        "responses": {
          "404": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Consumer"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "consumer_uuid"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getConsumer",
        "description": "Retrieves a single Consumer",
        "summary": "getConsumer",
        "tags": [
          "consumers"
        ]
      }
    },
    "/consumers/{consumer_uuid}/atom": {
      "get": {
        "responses": {
          "404": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/feed"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "consumer_uuid"
          }
        ],
        "produces": [
          "application/atom+xml"
        ],
        "operationId": "getConsumerAtomFeed",
        "description": "Retrieves and Event Atom Feed for a Consumer",
        "summary": "getConsumerAtomFeed",
        "tags": [
          "consumers"
        ]
      }
    },
    "/consumers/{consumer_uuid}/certificates": {
      "put": {
        "responses": {
          "404": {
            "description": ""
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "consumer_uuid"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "entitlement"
          },
          {
            "default": true,
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "lazy_regen"
          }
        ],
        "produces": [
          "*/*"
        ],
        "consumes": [
          "*/*"
        ],
        "operationId": "regenerateEntitlementCertificates",
        "description": "Regenerates the Entitlement Certificates for a Consumer",
        "summary": "regenerateEntitlementCertificates",
        "tags": [
          "consumers"
        ]
      },
      "get": {
        "responses": {
          "404": {
            "description": ""
          },
          "500": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/File"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "consumer_uuid"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serials"
          }
        ],
        "produces": [
          "application/zip"
        ],
        "operationId": "exportCertificates",
        "description": "Retrieves a Compressed File of Entitlement Certificates",
        "summary": "exportCertificates",
        "tags": [
          "consumers"
        ]
      }
    },
    "/consumers/{consumer_uuid}/owner": {
      "get": {
        "responses": {
          "404": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Owner"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "consumer_uuid"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getOwner",
        "description": "Retrieves the Owner associated to a Consumer",
        "summary": "getOwner",
        "tags": [
          "consumers"
        ]
      }
    },
    "/consumers/{consumer_uuid}/release": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Release"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "consumer_uuid"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getRelease",
        "description": "Retrieves the Release of a Consumer",
        "summary": "getRelease",
        "tags": [
          "consumers"
        ]
      }
    },
    "/consumertypes": {
      "post": {
        "responses": {
          "400": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/consumertype"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/consumertype"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "create",
        "description": "Creates a Consumer Type",
        "summary": "create",
        "tags": [
          "consumertypes"
        ]
      },
      "get": {
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/consumertype"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "operationId": "list",
        "description": "Retrieves a list of Consumer Types",
        "summary": "list",
        "tags": [
          "consumertypes"
        ]
      }
    },
    "/consumertypes/{id}": {
      "delete": {
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "deleteConsumerType",
        "description": "Removes a Consumer Type",
        "summary": "deleteConsumerType",
        "tags": [
          "consumertypes"
        ]
      },
      "put": {
        "responses": {
          "400": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/consumertype"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/consumertype"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "update",
        "description": "Updates a Consumer Type",
        "summary": "update",
        "tags": [
          "consumertypes"
        ]
      },
      "get": {
        "responses": {
          "404": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/consumertype"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getConsumerType",
        "description": "Retrieves a single Consumer Type",
        "summary": "getConsumerType",
        "tags": [
          "consumertypes"
        ]
      }
    },
    "/content": {
      "post": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Content"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Content"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "createContent",
        "description": "Creates a Content",
        "summary": "createContent",
        "tags": [
          "content"
        ]
      },
      "get": {
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Content"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "operationId": "list",
        "description": "Retrieves list of Content",
        "summary": "list",
        "tags": [
          "content"
        ]
      }
    },
    "/content/batch": {
      "post": {
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Content"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "schema": {
              "items": {
                "$ref": "#/definitions/Content"
              },
              "type": "array"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "createBatchContent",
        "description": "Creates Contents in bulk",
        "summary": "createBatchContent",
        "tags": [
          "content"
        ]
      }
    },
    "/content/{content_uuid}": {
      "delete": {
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "content_uuid"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "remove",
        "description": "Deletes a Content",
        "summary": "remove",
        "tags": [
          "content"
        ]
      },
      "put": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Content"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "content_uuid"
          },
          {
            "schema": {
              "$ref": "#/definitions/Content"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "updateContent",
        "description": "Updates a Content",
        "summary": "updateContent",
        "tags": [
          "content"
        ]
      },
      "get": {
        "responses": {
          "400": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Content"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "content_uuid"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getContent",
        "description": "Retrieves a single Content",
        "summary": "getContent",
        "tags": [
          "content"
        ]
      }
    },
    "/crl": {
      "delete": {
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            },
            "type": "array",
            "required": false,
            "in": "query",
            "name": "serial"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "unrevoke",
        "description": "Deletes a Certificate from the Revocation List",
        "summary": "unrevoke",
        "tags": [
          "crl"
        ]
      },
      "get": {
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "parameters": [],
        "produces": [
          "text/plain"
        ],
        "operationId": "getCurrentCrl",
        "description": "Retrieves the Certificate Revocation List",
        "summary": "getCurrentCrl",
        "tags": [
          "crl"
        ]
      }
    },
    "/deleted_consumers": {
      "get": {
        "responses": {
          "404": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/DeletedConsumer"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "date"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "listByDate",
        "description": "Retrieves a list of Deleted Consumers By deletion date or all. List returned is the deleted Consumers.",
        "summary": "listByDate",
        "tags": [
          "deleted_consumers"
        ]
      }
    },
    "/distributor_versions": {
      "post": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/distributorversion"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/distributorversion"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "create",
        "description": "Creates a Distributor Version",
        "summary": "create",
        "tags": [
          "distributor_versions"
        ]
      },
      "get": {
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/distributorversion"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "name_search"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "capability"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getVersions",
        "description": "Retrieves list of Distributor Versions",
        "summary": "getVersions",
        "tags": [
          "distributor_versions"
        ]
      }
    },
    "/distributor_versions/{id}": {
      "delete": {
        "responses": {
          "404": {
            "description": ""
          },
          "400": {
            "description": ""
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "id"
          }
        ],
        "produces": [
          "*/*"
        ],
        "operationId": "delete",
        "description": "Deletes a Distributor Version",
        "summary": "delete",
        "tags": [
          "distributor_versions"
        ]
      },
      "put": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/distributorversion"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "id"
          },
          {
            "schema": {
              "$ref": "#/definitions/distributorversion"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "update",
        "description": "Updates a Distributor Version",
        "summary": "update",
        "tags": [
          "distributor_versions"
        ]
      }
    },
    "/entitlements": {
      "get": {
        "responses": {
          "400": {
            "description": ""
          },
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Entitlement"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "consumer"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "matches"
          },
          {
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            },
            "type": "array",
            "required": false,
            "in": "query",
            "name": "attribute"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "listAllForConsumer",
        "description": "Retrieves list of Entitlements",
        "summary": "listAllForConsumer",
        "tags": [
          "entitlements"
        ]
      }
    },
    "/entitlements/consumer/{consumer_uuid}/product/{product_id}": {
      "get": {
        "responses": {
          "404": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Entitlement"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "consumer_uuid"
          },
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "product_id"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "hasEntitlement",
        "description": "Checks Consumer for Product Entitlement",
        "summary": "hasEntitlement",
        "tags": [
          "entitlements"
        ]
      }
    },
    "/entitlements/product/{product_id}": {
      "put": {
        "responses": {
          "202": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/JobDetail"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "product_id"
          },
          {
            "default": true,
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "lazy_regen"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "operationId": "regenerateEntitlementCertificatesForProduct",
        "description": "Regenerates the Entitlement Certificates for a Product",
        "summary": "regenerateEntitlementCertificatesForProduct",
        "tags": [
          "entitlements"
        ]
      }
    },
    "/entitlements/{dbid}": {
      "delete": {
        "responses": {
          "404": {
            "description": ""
          },
          "403": {
            "description": ""
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "dbid"
          }
        ],
        "produces": [
          "*/*"
        ],
        "operationId": "unbind",
        "description": "Deletes an Entitlement",
        "summary": "unbind",
        "tags": [
          "entitlements"
        ]
      }
    },
    "/entitlements/{dbid}/upstream_cert": {
      "get": {
        "responses": {
          "404": {
            "description": ""
          },
          "200": {
            "schema": {
              "type": "string"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "dbid"
          }
        ],
        "produces": [
          "text/plain"
        ],
        "operationId": "getUpstreamCert",
        "description": "Retrieves a Subscription Certificate.  We can't return CdnInfo at this time, but when the time comes this is the implementation we want to start from. It will require changes to thumbslug.  will also @Produces(MediaType.APPLICATION_JSON)",
        "summary": "getUpstreamCert",
        "tags": [
          "entitlements"
        ]
      }
    },
    "/entitlements/{entitlement_id}": {
      "put": {
        "responses": {
          "404": {
            "description": ""
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "entitlement_id"
          },
          {
            "schema": {
              "$ref": "#/definitions/Entitlement"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "updateEntitlement",
        "description": "Updates an Entitlement. This only works for the quantity.",
        "summary": "updateEntitlement",
        "tags": [
          "entitlements"
        ]
      },
      "get": {
        "responses": {
          "404": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Entitlement"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "entitlement_id"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getEntitlement",
        "description": "Retrieves a single Entitlement",
        "summary": "getEntitlement",
        "tags": [
          "entitlements"
        ]
      }
    },
    "/entitlements/{entitlement_id}/migrate": {
      "put": {
        "responses": {
          "404": {
            "description": ""
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "entitlement_id"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "to_consumer"
          },
          {
            "format": "int32",
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "quantity"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "operationId": "migrateEntitlement",
        "description": "Migrate entitlements from one distributor consumer to another. Can specify full or partial quantity. No specified quantity will lead to full migration of the entitlement.",
        "summary": "migrateEntitlement",
        "tags": [
          "entitlements"
        ]
      }
    },
    "/environments": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Environment"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "operationId": "getEnvironments",
        "description": "Lists the Environments.  Only available to super admins.",
        "summary": "getEnvironments",
        "tags": [
          "environments"
        ]
      }
    },
    "/environments/{env_id}": {
      "delete": {
        "responses": {
          "404": {
            "description": ""
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "env_id"
          }
        ],
        "produces": [
          "*/*"
        ],
        "operationId": "deleteEnv",
        "description": "Deletes an environment. WARNING: this will delete all consumers in the environment and revoke their entitlement certificates.",
        "summary": "deleteEnv",
        "tags": [
          "environments"
        ]
      },
      "get": {
        "responses": {
          "404": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Environment"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "env_id"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getEnv",
        "description": "Retrieves a single Environment",
        "summary": "getEnv",
        "tags": [
          "environments"
        ]
      }
    },
    "/environments/{env_id}/consumers": {
      "post": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Consumer"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "env_id"
          },
          {
            "schema": {
              "$ref": "#/definitions/Consumer"
            },
            "required": false,
            "name": "body",
            "in": "body"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "username"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "owner"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "activation_keys"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "create",
        "description": "Creates an Environment",
        "summary": "create",
        "tags": [
          "environments"
        ]
      }
    },
    "/environments/{env_id}/content": {
      "delete": {
        "responses": {
          "404": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/JobDetail"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "env_id"
          },
          {
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            },
            "type": "array",
            "required": false,
            "in": "query",
            "name": "content"
          },
          {
            "default": true,
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "lazy_regen"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "demoteContent",
        "description": "Demotes a Content from an Environment. Consumer's registered to this environment will no see this content in their entitlement certificates. (after they are regenerated and synced to clients) This call accepts multiple content IDs to demote at once, allowing us to mass demote, then trigger a cert regeneration. NOTE: This call expects the actual content IDs, *not* the ID created for each EnvironmentContent object created after a promotion. This is to help integrate with other management apps which should not have to track/lookup a specific ID for the content to demote.",
        "summary": "demoteContent",
        "tags": [
          "environments"
        ]
      },
      "post": {
        "responses": {
          "404": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/JobDetail"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "env_id"
          },
          {
            "schema": {
              "items": {
                "$ref": "#/definitions/EnvironmentContent"
              },
              "type": "array"
            },
            "required": false,
            "name": "body",
            "in": "body"
          },
          {
            "default": true,
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "lazy_regen"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "promoteContent",
        "description": "Promotes a Content into an Environment. This call accepts multiple content sets to promote at once, after which all affected certificates for consumers in the enironment will be regenerated. Consumers registered to this environment will now receive this content in their entitlement certificates. Because the certificate regeneraiton can be quite time consuming, this is done as an asynchronous job. The content will be promoted and immediately available for new entitlements, but existing entitlements could take some time to be regenerated and sent down to clients as they check in.",
        "summary": "promoteContent",
        "tags": [
          "environments"
        ]
      }
    },
    "/events": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Event"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "operationId": "listEvents",
        "description": "Retrieves a list of Events",
        "summary": "listEvents",
        "tags": [
          "events"
        ]
      }
    },
    "/events/{uuid}": {
      "get": {
        "responses": {
          "404": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Event"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "uuid"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getEvent",
        "description": "Retrieves a single Event",
        "summary": "getEvent",
        "tags": [
          "events"
        ]
      }
    },
    "/hypervisors": {
      "post": {
        "deprecated": true,
        "tags": [
          "hypervisors"
        ],
        "summary": "hypervisorUpdate",
        "description": "Updates the list of Hypervisor Guests Allows agents such as virt-who to update its host list and associate the guests for each host. This is typically used when a host is unable to register to candlepin via subscription manager.  In situations where consumers already exist it is probably best not to allow creation of new hypervisor consumers.  Most consumers do not have a hypervisorId attribute, so that should be added manually when necessary by the management environment. @deprecated Use the asynchronous method",
        "operationId": "hypervisorUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "schema": {
              "additionalProperties": {
                "items": {
                  "$ref": "#/definitions/GuestId"
                },
                "type": "array"
              },
              "type": "object"
            },
            "required": false,
            "name": "body",
            "in": "body"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "owner"
          },
          {
            "default": true,
            "type": "boolean",
            "required": false,
            "description": "specify whether or not to create missing hypervisors.Default is true.  If false is specified, hypervisorIds that are not foundwill result in failed entries in the resulting HypervisorCheckInResult",
            "in": "query",
            "name": "create_missing"
          }
        ],
        "responses": {
          "202": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/HypervisorCheckInResult"
            },
            "description": "successful operation"
          }
        }
      }
    },
    "/hypervisors/{owner}": {
      "post": {
        "responses": {
          "202": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/JobDetail"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "body",
            "in": "body"
          },
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner"
          },
          {
            "default": true,
            "type": "boolean",
            "required": false,
            "description": "specify whether or not to create missing hypervisors.Default is true.  If false is specified, hypervisorIds that are not foundwill result in failed entries in the resulting HypervisorCheckInResult",
            "in": "query",
            "name": "create_missing"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "reporter_id"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "text/plain"
        ],
        "operationId": "hypervisorUpdateAsync",
        "description": "Creates or Updates the list of Hypervisor hosts Allows agents such as virt-who to update hosts' information . This is typically used when a host is unable to register to candlepin via subscription manager. In situations where consumers already exist it is probably best not to allow creation of new hypervisor consumers.  Most consumers do not have a hypervisorId attribute, so that should be added manually when necessary by the management environment. Default is true.  If false is specified, hypervisorIds that are not found will result in a failed state of the job.",
        "summary": "hypervisorUpdateAsync",
        "tags": [
          "hypervisors"
        ]
      }
    },
    "/jobs": {
      "get": {
        "responses": {
          "404": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/JobStatus"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "owner"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "consumer"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "principal"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getStatuses",
        "description": "Retrieves a list of Job Status",
        "summary": "getStatuses",
        "tags": [
          "jobs"
        ]
      }
    },
    "/jobs/scheduler": {
      "post": {
        "responses": {
          "500": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/SchedulerStatus"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "boolean"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "setSchedulerStatus",
        "description": "Updates the Scheduler Status",
        "summary": "setSchedulerStatus",
        "tags": [
          "jobs"
        ]
      },
      "get": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/SchedulerStatus"
            },
            "description": "successful operation"
          }
        },
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "operationId": "getSchedulerStatus",
        "description": "Retrieves the Scheduler Status",
        "summary": "getSchedulerStatus",
        "tags": [
          "jobs"
        ]
      }
    },
    "/jobs/{job_id}": {
      "delete": {
        "responses": {
          "404": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/JobStatus"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "job_id"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "cancel",
        "description": "Cancels a Job Status",
        "summary": "cancel",
        "tags": [
          "jobs"
        ]
      },
      "post": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/JobStatus"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "job_id"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "*/*"
        ],
        "operationId": "getStatusAndDeleteIfFinished",
        "description": "Retrieves a Job Status and Removes if finished",
        "summary": "getStatusAndDeleteIfFinished",
        "tags": [
          "jobs"
        ]
      },
      "get": {
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/JobStatus"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "job_id"
          },
          {
            "default": false,
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "result_data"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getStatus",
        "description": "Retrieves a single Job Status",
        "summary": "getStatus",
        "tags": [
          "jobs"
        ]
      }
    },
    "/owners": {
      "post": {
        "responses": {
          "400": {
            "description": "Invalid owner specified in body"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Owner"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Owner"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "createOwner",
        "description": "Creates an Owner",
        "summary": "Create Owner",
        "tags": [
          "owners"
        ]
      },
      "get": {
        "responses": {
          "200": {
            "schema": {
              "items": {
                "$ref": "#/definitions/Owner"
              },
              "type": "array"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "key"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "list",
        "description": "Retrieves a list of Owners",
        "summary": "List Owners",
        "tags": [
          "owners"
        ]
      }
    },
    "/owners/subscriptions": {
      "put": {
        "deprecated": true,
        "tags": [
          "owners"
        ],
        "summary": "Update Subscription",
        "description": "Updates a Subscription for an Owner.  Please update pools directly with POST /pools.",
        "operationId": "updateSubscription",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Subscription"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "responses": {
          "404": {
            "description": "Owner not found"
          }
        }
      }
    },
    "/owners/{owner_key}": {
      "delete": {
        "responses": {
          "404": {
            "description": "Owner not found"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          },
          {
            "default": true,
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "revoke"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "deleteOwner",
        "description": "Removes an Owner",
        "summary": "Delete Owner",
        "tags": [
          "owners"
        ]
      },
      "put": {
        "responses": {
          "404": {
            "description": "Owner not found"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Owner"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          },
          {
            "schema": {
              "$ref": "#/definitions/Owner"
            },
            "required": false,
            "name": "body",
            "in": "body"
          }
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "operationId": "updateOwner",
        "description": "To un-set the defaultServiceLevel for an owner, submit an empty string.",
        "summary": "Update Owner",
        "tags": [
          "owners"
        ]
      },
      "get": {
        "responses": {
          "404": {
            "description": "An owner not found"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Owner"
            },
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "path",
            "name": "owner_key"
          }
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "getOwner",
        "description": "Retrieves a single Owner",
        "summary": "Get Owner",
        "tags": [
          "owners"
        ]
      }
    }
  },
  "securityDefinitions": {
    "basic": {
      "type": "basic",
      "description": "Candlepin requires HTTP Basic authentication of an owner"
    }
  },
  "definitions": {
    "ComplianceReason": {
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "message": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "HypervisorCheckInResult": {
      "properties": {
        "failedUpdate": {
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "type": "array"
        },
        "unchanged": {
          "items": {
            "$ref": "#/definitions/Consumer"
          },
          "uniqueItems": true,
          "type": "array"
        },
        "updated": {
          "items": {
            "$ref": "#/definitions/Consumer"
          },
          "uniqueItems": true,
          "type": "array"
        },
        "created": {
          "items": {
            "$ref": "#/definitions/Consumer"
          },
          "uniqueItems": true,
          "type": "array"
        }
      },
      "type": "object"
    },
    "category": {
      "xml": {
        "name": "category"
      },
      "properties": {
        "label": {
          "xml": {
            "attribute": true
          },
          "type": "string"
        },
        "scheme": {
          "xml": {
            "attribute": true
          },
          "format": "uri",
          "type": "string"
        },
        "term": {
          "xml": {
            "attribute": true
          },
          "type": "string"
        },
        "base": {
          "xml": {
            "attribute": true,
            "namespace": "http://www.w3.org/XML/1998/namespace"
          },
          "format": "uri",
          "type": "string"
        },
        "lang": {
          "xml": {
            "attribute": true,
            "namespace": "http://www.w3.org/XML/1998/namespace"
          },
          "type": "string"
        },
        "extensionAttributes": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "Entitlement": {
      "properties": {
        "updated": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "consumer": {
          "$ref": "#/definitions/NestedConsumer"
        },
        "pool": {
          "$ref": "#/definitions/pool"
        },
        "certificates": {
          "items": {
            "$ref": "#/definitions/cert"
          },
          "uniqueItems": true,
          "type": "array"
        },
        "quantity": {
          "format": "int32",
          "type": "integer"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        },
        "endDate": {
          "format": "date-time",
          "type": "string"
        },
        "href": {
          "type": "string"
        }
      },
      "required": [
        "consumer",
        "id",
        "pool"
      ],
      "type": "object"
    },
    "Event": {
      "properties": {
        "principal": {
          "$ref": "#/definitions/PrincipalData"
        },
        "messageText": {
          "type": "string"
        },
        "referenceType": {
          "enum": [
            "POOL"
          ],
          "type": "string"
        },
        "referenceId": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "enum": [
            "CREATED",
            "MODIFIED",
            "DELETED",
            "EXPIRED"
          ],
          "type": "string"
        },
        "target": {
          "enum": [
            "CONSUMER",
            "OWNER",
            "ENTITLEMENT",
            "POOL",
            "EXPORT",
            "IMPORT",
            "USER",
            "ROLE",
            "SUBSCRIPTION",
            "ACTIVATIONKEY",
            "GUESTID",
            "RULES",
            "COMPLIANCE"
          ],
          "type": "string"
        },
        "targetName": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "entityId": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "ownerId": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "consumerId": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "id",
        "target",
        "timestamp",
        "type"
      ],
      "type": "object"
    },
    "HypervisorId": {
      "properties": {
        "updated": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "reporterId": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "hypervisorId": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "id": {
          "$ref": "#/definitions/Serializable"
        }
      },
      "required": [
        "hypervisorId",
        "id"
      ],
      "type": "object"
    },
    "ActivationKeyData": {
      "properties": {
        "releaseVer": {
          "$ref": "#/definitions/Release"
        },
        "updated": {
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "format": "date-time",
          "type": "string"
        },
        "autoAttach": {
          "default": false,
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/NestedOwner"
        },
        "pools": {
          "items": {
            "$ref": "#/definitions/AKPoolData"
          },
          "type": "array"
        },
        "products": {
          "items": {
            "$ref": "#/definitions/AKProductData"
          },
          "type": "array"
        },
        "contentOverrides": {
          "items": {
            "$ref": "#/definitions/AKContentOverride"
          },
          "type": "array"
        },
        "serviceLevel": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "NestedEntitlement": {
      "properties": {
        "href": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "DeletedConsumer": {
      "properties": {
        "updated": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "ownerDisplayName": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "ownerKey": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "ownerId": {
          "maxLength": 32,
          "minLength": 0,
          "type": "string"
        },
        "consumerUuid": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "required": [
        "consumerUuid",
        "id",
        "ownerId"
      ],
      "type": "object"
    },
    "ImportRecord": {
      "properties": {
        "updated": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "$ref": "#/definitions/Serializable"
        },
        "status": {
          "enum": [
            "SUCCESS",
            "FAILURE",
            "DELETE",
            "SUCCESS_WITH_WARNING"
          ],
          "type": "string"
        },
        "statusMessage": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "fileName": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "generatedBy": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "generatedDate": {
          "format": "date-time",
          "type": "string"
        },
        "upstreamConsumer": {
          "$ref": "#/definitions/ImportUpstreamConsumer"
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "ActivationKeyPool": {
      "properties": {
        "updated": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "quantity": {
          "format": "int64",
          "type": "integer"
        },
        "pool": {
          "$ref": "#/definitions/pool"
        },
        "id": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "pool"
      ],
      "type": "object"
    },
    "CertificateSerial": {
      "properties": {
        "updated": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "serial": {
          "type": "integer"
        },
        "expiration": {
          "format": "date-time",
          "type": "string"
        },
        "collected": {
          "default": false,
          "type": "boolean"
        },
        "revoked": {
          "default": false,
          "type": "boolean"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "collected",
        "id"
      ],
      "type": "object"
    },
    "AKProductData": {
      "properties": {
        "productId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "entry": {
      "xml": {
        "name": "entry"
      },
      "properties": {
        "base": {
          "xml": {
            "attribute": true,
            "namespace": "http://www.w3.org/XML/1998/namespace"
          },
          "format": "uri",
          "type": "string"
        },
        "lang": {
          "xml": {
            "attribute": true,
            "namespace": "http://www.w3.org/XML/1998/namespace"
          },
          "type": "string"
        },
        "extensionAttributes": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        },
        "anyOther": {
          "items": {
            "type": "object"
          },
          "type": "array"
        },
        "summary": {
          "type": "string"
        },
        "content": {
          "$ref": "#/definitions/content"
        },
        "rights": {
          "type": "string"
        },
        "source": {
          "$ref": "#/definitions/Source"
        },
        "title": {
          "type": "string"
        },
        "links": {
          "items": {
            "$ref": "#/definitions/link"
          },
          "type": "array"
        },
        "categories": {
          "items": {
            "$ref": "#/definitions/category"
          },
          "type": "array"
        },
        "updated": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "format": "uri",
          "type": "string"
        },
        "published": {
          "format": "date-time",
          "type": "string"
        },
        "author": {
          "items": {
            "$ref": "#/definitions/Person"
          },
          "type": "array"
        },
        "contributor": {
          "items": {
            "$ref": "#/definitions/Person"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Role": {
      "properties": {
        "updated": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "href": {
          "type": "string"
        },
        "name": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "permissions": {
          "items": {
            "$ref": "#/definitions/PermissionBlueprint"
          },
          "uniqueItems": true,
          "type": "array"
        },
        "users": {
          "items": {
            "$ref": "#/definitions/User"
          },
          "uniqueItems": true,
          "type": "array"
        },
        "id": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "name"
      ],
      "type": "object"
    },
    "ProductContent": {
      "properties": {
        "updated": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "enabled": {
          "default": false,
          "type": "boolean"
        },
        "content": {
          "$ref": "#/definitions/Content"
        }
      },
      "required": [
        "content"
      ],
      "type": "object"
    },
    "ActivationKey": {
      "properties": {
        "updated": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "autoAttach": {
          "default": false,
          "type": "boolean"
        },
        "serviceLevel": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/NestedOwner"
        },
        "pools": {
          "items": {
            "$ref": "#/definitions/ActivationKeyPool"
          },
          "uniqueItems": true,
          "type": "array"
        },
        "products": {
          "items": {
            "$ref": "#/definitions/Product"
          },
          "uniqueItems": true,
          "type": "array"
        },
        "contentOverrides": {
          "items": {
            "$ref": "#/definitions/ActivationKeyContentOverride"
          },
          "uniqueItems": true,
          "type": "array"
        },
        "releaseVer": {
          "$ref": "#/definitions/Release"
        }
      },
      "required": [
        "id",
        "name",
        "owner"
      ],
      "type": "object"
    },
    "UpstreamConsumer": {
      "properties": {
        "updated": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "uuid": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "name": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "idCert": {
          "$ref": "#/definitions/IdentityCertificate"
        },
        "type": {
          "$ref": "#/definitions/consumertype"
        },
        "ownerId": {
          "type": "string"
        },
        "apiUrl": {
          "type": "string"
        },
        "webUrl": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "ownerId",
        "type",
        "uuid"
      ],
      "type": "object"
    },
    "ProvidedProduct": {
      "properties": {
        "productName": {
          "type": "string"
        },
        "productId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "EnvironmentContent": {
      "properties": {
        "updated": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "enabled": {
          "default": false,
          "type": "boolean"
        },
        "content": {
          "$ref": "#/definitions/Content"
        },
        "id": {
          "type": "string"
        }
      },
      "required": [
        "content",
        "id"
      ],
      "type": "object"
    },
    "JobBuilder": {
      "type": "object"
    },
    "pool": {
      "xml": {
        "name": "pool"
      },
      "properties": {
        "subscriptionId": {
          "type": "string"
        },
        "subscriptionSubKey": {
          "type": "string"
        },
        "sourceConsumer": {
          "$ref": "#/definitions/NestedConsumer",
          "readOnly": true
        },
        "sourceStackId": {
          "readOnly": true,
          "type": "string"
        },
        "derivedProvidedProducts": {
          "items": {
            "$ref": "#/definitions/ProvidedProduct"
          },
          "uniqueItems": true,
          "type": "array"
        },
        "providedProducts": {
          "items": {
            "$ref": "#/definitions/ProvidedProduct"
          },
          "uniqueItems": true,
          "type": "array"
        },
        "branding": {
          "items": {
            "$ref": "#/definitions/Branding"
          },
          "uniqueItems": true,
          "type": "array"
        },
        "exported": {
          "format": "int64",
          "type": "integer"
        },
        "consumed": {
          "format": "int64",
          "type": "integer"
        },
        "orderNumber": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "accountNumber": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "contractNumber": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "restrictedToUsername": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "attributes": {
          "items": {
            "$ref": "#/definitions/PoolAttribute"
          },
          "uniqueItems": true,
          "type": "array"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "enum": [
            "NORMAL",
            "ENTITLEMENT_DERIVED",
            "STACK_DERIVED",
            "BONUS",
            "UNMAPPED_GUEST",
            "DEVELOPMENT"
          ],
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/NestedOwner"
        },
        "activeSubscription": {
          "default": false,
          "type": "boolean"
        },
        "sourceEntitlement": {
          "$ref": "#/definitions/NestedEntitlement"
        },
        "quantity": {
          "format": "int64",
          "type": "integer"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        },
        "endDate": {
          "format": "date-time",
          "type": "string"
        },
        "productAttributes": {
          "items": {
            "$ref": "#/definitions/ProductAttribute"
          },
          "uniqueItems": true,
          "type": "array"
        },
        "calculatedAttributes": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "upstreamPoolId": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "upstreamEntitlementId": {
          "maxLength": 37,
          "minLength": 0,
          "type": "string"
        },
        "upstreamConsumerId": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "productName": {
          "type": "string"
        },
        "productId": {
          "type": "string"
        },
        "developmentPool": {
          "default": false,
          "type": "boolean"
        },
        "stacked": {
          "default": false,
          "type": "boolean"
        },
        "stackId": {
          "type": "string"
        },
        "derivedProductName": {
          "type": "string"
        },
        "derivedProductId": {
          "type": "string"
        },
        "href": {
          "type": "string"
        },
        "derivedProductAttributes": {
          "items": {
            "$ref": "#/definitions/ProductAttribute"
          },
          "uniqueItems": true,
          "type": "array"
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "updated": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "endDate",
        "id",
        "owner",
        "quantity",
        "startDate",
        "type"
      ],
      "type": "object"
    },
    "poolquantity": {
      "xml": {
        "name": "poolquantity"
      },
      "properties": {
        "quantity": {
          "format": "int32",
          "type": "integer"
        },
        "pool": {
          "$ref": "#/definitions/pool"
        }
      },
      "type": "object"
    },
    "AKContentOverride": {
      "properties": {
        "value": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "contentLabel": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ComplianceStatus": {
      "properties": {
        "status": {
          "type": "string"
        },
        "date": {
          "format": "date-time",
          "type": "string"
        },
        "compliantUntil": {
          "format": "date-time",
          "type": "string"
        },
        "nonCompliantProducts": {
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "type": "array"
        },
        "compliantProducts": {
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/Entitlement"
            },
            "uniqueItems": true,
            "type": "array"
          },
          "type": "object"
        },
        "partiallyCompliantProducts": {
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/Entitlement"
            },
            "uniqueItems": true,
            "type": "array"
          },
          "type": "object"
        },
        "partialStacks": {
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/Entitlement"
            },
            "uniqueItems": true,
            "type": "array"
          },
          "type": "object"
        },
        "reasons": {
          "items": {
            "$ref": "#/definitions/ComplianceReason"
          },
          "uniqueItems": true,
          "type": "array"
        },
        "compliant": {
          "default": false,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "NestedOwner": {
      "properties": {
        "href": {
          "type": "string"
        },
        "displayName": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "key": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "id": {
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "displayName",
        "id",
        "key"
      ],
      "type": "object"
    },
    "MultipartInput": {
      "properties": {
        "parts": {
          "items": {
            "$ref": "#/definitions/InputPart"
          },
          "type": "array"
        },
        "preamble": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "consumercapability": {
      "xml": {
        "name": "consumercapability"
      },
      "properties": {
        "name": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "name"
      ],
      "type": "object"
    },
    "ActivationKeyContentOverride": {
      "properties": {
        "updated": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "value": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "name": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "contentLabel": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "contentLabel",
        "name",
        "value"
      ],
      "type": "object"
    },
    "JobKey": {
      "properties": {
        "group": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "JobDetail": {
      "properties": {
        "key": {
          "$ref": "#/definitions/JobKey"
        },
        "description": {
          "type": "string"
        },
        "persistJobDataAfterExecution": {
          "default": false,
          "type": "boolean"
        },
        "concurrentExectionDisallowed": {
          "default": false,
          "type": "boolean"
        },
        "jobDataMap": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        },
        "jobBuilder": {
          "$ref": "#/definitions/JobBuilder"
        },
        "durable": {
          "default": false,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "CdnCertificate": {
      "properties": {
        "updated": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "serial": {
          "$ref": "#/definitions/CertificateSerial"
        },
        "id": {
          "type": "string"
        },
        "cert": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      },
      "required": [
        "cert",
        "id",
        "key"
      ],
      "type": "object"
    },
    "Cdn": {
      "properties": {
        "updated": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "certificate": {
          "$ref": "#/definitions/CdnCertificate"
        },
        "url": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "name": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "label": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "label",
        "name",
        "url"
      ],
      "type": "object"
    },
    "cert": {
      "xml": {
        "name": "cert"
      },
      "properties": {
        "updated": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "serial": {
          "$ref": "#/definitions/CertificateSerial"
        },
        "id": {
          "type": "string"
        },
        "cert": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      },
      "required": [
        "cert",
        "id",
        "key"
      ],
      "type": "object"
    },
    "Product": {
      "properties": {
        "updated": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "multiplier": {
          "format": "int64",
          "type": "integer"
        },
        "attributes": {
          "items": {
            "$ref": "#/definitions/ProductAttribute"
          },
          "uniqueItems": true,
          "type": "array"
        },
        "productContent": {
          "items": {
            "$ref": "#/definitions/ProductContent"
          },
          "type": "array"
        },
        "dependentProductIds": {
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "type": "array"
        },
        "href": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "uuid"
      ],
      "type": "object"
    },
    "Owner": {
      "properties": {
        "updated": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "href": {
          "type": "string"
        },
        "parentOwner": {
          "$ref": "#/definitions/NestedOwner"
        },
        "id": {
          "readOnly": true,
          "type": "string"
        },
        "key": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "displayName": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "contentPrefix": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "defaultServiceLevel": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "upstreamConsumer": {
          "$ref": "#/definitions/UpstreamConsumer"
        },
        "logLevel": {
          "maxLength": 32,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "displayName",
        "id",
        "key"
      ],
      "type": "object"
    },
    "Serializable": {
      "type": "object"
    },
    "InputPart": {
      "properties": {
        "headers": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object"
        },
        "mediaType": {
          "$ref": "#/definitions/MediaType"
        },
        "bodyAsString": {
          "type": "string"
        },
        "contentTypeFromMessage": {
          "default": false,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Consumer": {
      "properties": {
        "updated": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "href": {
          "type": "string"
        },
        "dev": {
          "default": false,
          "type": "boolean"
        },
        "annotations": {
          "type": "string"
        },
        "autoheal": {
          "default": false,
          "type": "boolean"
        },
        "contentTags": {
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "type": "array"
        },
        "hypervisorId": {
          "$ref": "#/definitions/HypervisorId"
        },
        "capabilities": {
          "items": {
            "$ref": "#/definitions/consumercapability"
          },
          "uniqueItems": true,
          "type": "array"
        },
        "guestIds": {
          "items": {
            "$ref": "#/definitions/GuestId"
          },
          "type": "array"
        },
        "idCert": {
          "$ref": "#/definitions/IdentityCertificate"
        },
        "releaseVer": {
          "$ref": "#/definitions/Release"
        },
        "serviceLevel": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "entitlementStatus": {
          "maxLength": 32,
          "minLength": 0,
          "type": "string"
        },
        "username": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "name": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "uuid": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/consumertype"
        },
        "owner": {
          "$ref": "#/definitions/NestedOwner"
        },
        "environment": {
          "$ref": "#/definitions/Environment"
        },
        "entitlementCount": {
          "format": "int64",
          "type": "integer"
        },
        "facts": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "lastCheckin": {
          "format": "date-time",
          "type": "string"
        },
        "installedProducts": {
          "items": {
            "$ref": "#/definitions/ConsumerInstalledProduct"
          },
          "uniqueItems": true,
          "type": "array"
        },
        "canActivate": {
          "default": false,
          "type": "boolean"
        }
      },
      "required": [
        "id",
        "name",
        "uuid"
      ],
      "type": "object"
    },
    "PoolAttribute": {
      "properties": {
        "updated": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "value": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "name": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "name"
      ],
      "type": "object"
    },
    "MediaType": {
      "properties": {
        "wildcardType": {
          "default": false,
          "type": "boolean"
        },
        "wildcardSubtype": {
          "default": false,
          "type": "boolean"
        },
        "parameters": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "subtype": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "OwnerInfo": {
      "properties": {
        "entitlementsConsumedByFamily": {
          "additionalProperties": {
            "$ref": "#/definitions/ConsumptionTypeCounts"
          },
          "type": "object"
        },
        "consumerCountsByComplianceStatus": {
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          },
          "type": "object"
        },
        "enabledConsumerTypeCountByPool": {
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          },
          "type": "object"
        },
        "consumerTypeCountByPool": {
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          },
          "type": "object"
        },
        "entitlementsConsumedByType": {
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          },
          "type": "object"
        },
        "consumerGuestCounts": {
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          },
          "type": "object"
        },
        "consumerCounts": {
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "Subscription": {
      "properties": {
        "updated": {
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "format": "date-time",
          "type": "string"
        },
        "stackId": {
          "type": "string"
        },
        "stacked": {
          "default": false,
          "type": "boolean"
        },
        "certificate": {
          "$ref": "#/definitions/SubscriptionsCertificate"
        },
        "cdn": {
          "$ref": "#/definitions/Cdn"
        },
        "upstreamConsumerId": {
          "type": "string"
        },
        "quantity": {
          "format": "int64",
          "type": "integer"
        },
        "branding": {
          "items": {
            "$ref": "#/definitions/Branding"
          },
          "uniqueItems": true,
          "type": "array"
        },
        "derivedProvidedProducts": {
          "items": {
            "$ref": "#/definitions/Product"
          },
          "uniqueItems": true,
          "type": "array"
        },
        "providedProducts": {
          "items": {
            "$ref": "#/definitions/Product"
          },
          "uniqueItems": true,
          "type": "array"
        },
        "derivedProduct": {
          "$ref": "#/definitions/Product"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "owner": {
          "$ref": "#/definitions/NestedOwner"
        },
        "id": {
          "type": "string"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        },
        "endDate": {
          "format": "date-time",
          "type": "string"
        },
        "contractNumber": {
          "type": "string"
        },
        "accountNumber": {
          "type": "string"
        },
        "modified": {
          "format": "date-time",
          "type": "string"
        },
        "orderNumber": {
          "type": "string"
        },
        "upstreamPoolId": {
          "type": "string"
        },
        "upstreamEntitlementId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "QueueStatus": {
      "properties": {
        "pendingMessageCount": {
          "format": "int64",
          "type": "integer"
        },
        "queueName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "IdentityCertificate": {
      "properties": {
        "updated": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "serial": {
          "$ref": "#/definitions/CertificateSerial"
        },
        "id": {
          "type": "string"
        },
        "cert": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      },
      "required": [
        "cert",
        "id",
        "key"
      ],
      "type": "object"
    },
    "feed": {
      "xml": {
        "name": "feed"
      },
      "properties": {
        "base": {
          "xml": {
            "attribute": true,
            "namespace": "http://www.w3.org/XML/1998/namespace"
          },
          "format": "uri",
          "type": "string"
        },
        "lang": {
          "xml": {
            "attribute": true,
            "namespace": "http://www.w3.org/XML/1998/namespace"
          },
          "type": "string"
        },
        "entries": {
          "items": {
            "$ref": "#/definitions/entry"
          },
          "type": "array"
        },
        "extensionAttributes": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        },
        "generator": {
          "$ref": "#/definitions/generator"
        },
        "logo": {
          "format": "uri",
          "type": "string"
        },
        "icon": {
          "format": "uri",
          "type": "string"
        },
        "rights": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "subtitle": {
          "type": "string"
        },
        "categories": {
          "items": {
            "$ref": "#/definitions/category"
          },
          "type": "array"
        },
        "updated": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "format": "uri",
          "type": "string"
        },
        "links": {
          "items": {
            "$ref": "#/definitions/link"
          },
          "type": "array"
        },
        "author": {
          "items": {
            "$ref": "#/definitions/Person"
          },
          "type": "array"
        },
        "contributor": {
          "items": {
            "$ref": "#/definitions/Person"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "GuestId": {
      "properties": {
        "updated": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "guestId": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "required": [
        "guestId",
        "id"
      ],
      "type": "object"
    },
    "SubscriptionsCertificate": {
      "properties": {
        "updated": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "serial": {
          "$ref": "#/definitions/CertificateSerial"
        },
        "id": {
          "type": "string"
        },
        "cert": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      },
      "required": [
        "cert",
        "id",
        "key"
      ],
      "type": "object"
    },
    "Content": {
      "properties": {
        "updated": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "arches": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "modifiedProductIds": {
          "minItems": 0,
          "maxItems": 255,
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "type": "array"
        },
        "metadataExpire": {
          "format": "int64",
          "type": "integer"
        },
        "gpgUrl": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "releaseVer": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "id": {
          "maxLength": 32,
          "minLength": 0,
          "type": "string"
        },
        "type": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "label": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "name": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "vendor": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "contentUrl": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "requiredTags": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "id",
        "label",
        "name",
        "type",
        "uuid",
        "vendor"
      ],
      "type": "object"
    },
    "Environment": {
      "properties": {
        "updated": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "environmentContent": {
          "items": {
            "$ref": "#/definitions/EnvironmentContent"
          },
          "uniqueItems": true,
          "type": "array"
        },
        "id": {
          "type": "string"
        },
        "description": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "name": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/NestedOwner"
        }
      },
      "required": [
        "id",
        "name",
        "owner"
      ],
      "type": "object"
    },
    "Person": {
      "properties": {
        "email": {
          "type": "string"
        },
        "uri": {
          "format": "uri",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "base": {
          "xml": {
            "attribute": true,
            "namespace": "http://www.w3.org/XML/1998/namespace"
          },
          "format": "uri",
          "type": "string"
        },
        "lang": {
          "xml": {
            "attribute": true,
            "namespace": "http://www.w3.org/XML/1998/namespace"
          },
          "type": "string"
        },
        "extensionAttributes": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "File": {
      "properties": {
        "usableSpace": {
          "format": "int64",
          "type": "integer"
        },
        "freeSpace": {
          "format": "int64",
          "type": "integer"
        },
        "totalSpace": {
          "format": "int64",
          "type": "integer"
        },
        "hidden": {
          "default": false,
          "type": "boolean"
        },
        "file": {
          "default": false,
          "type": "boolean"
        },
        "directory": {
          "default": false,
          "type": "boolean"
        },
        "canonicalFile": {
          "$ref": "#/definitions/File"
        },
        "path": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "parent": {
          "type": "string"
        },
        "absolute": {
          "default": false,
          "type": "boolean"
        },
        "canonicalPath": {
          "type": "string"
        },
        "parentFile": {
          "$ref": "#/definitions/File"
        },
        "absolutePath": {
          "type": "string"
        },
        "absoluteFile": {
          "$ref": "#/definitions/File"
        }
      },
      "type": "object"
    },
    "DeleteResult": {
      "properties": {
        "deletedRecords": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "status": {
      "xml": {
        "name": "status"
      },
      "description": "Version and Status information about running Candlepin server",
      "properties": {
        "rulesSource": {
          "enum": [
            "UNDEFINED",
            "DATABASE",
            "DEFAULT"
          ],
          "type": "string"
        },
        "managerCapabilities": {
          "items": {
            "type": "string"
          },
          "example": "[ \"cores\", \"ram\", \"instance_multiplier\" ]",
          "type": "array"
        },
        "timeUTC": {
          "format": "date-time",
          "type": "string"
        },
        "standalone": {
          "default": false,
          "type": "boolean"
        },
        "release": {
          "example": "1",
          "type": "string"
        },
        "rulesVersion": {
          "example": "5.8",
          "type": "string"
        },
        "version": {
          "example": "0.9.10",
          "type": "string"
        },
        "result": {
          "default": false,
          "example": true,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "consumertype": {
      "xml": {
        "name": "consumertype"
      },
      "properties": {
        "updated": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "manifest": {
          "default": false,
          "type": "boolean"
        },
        "label": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "label",
        "manifest"
      ],
      "type": "object"
    },
    "serials": {
      "xml": {
        "name": "serials"
      },
      "properties": {
        "serial": {
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "User": {
      "properties": {
        "updated": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "superAdmin": {
          "default": false,
          "type": "boolean"
        },
        "hashedPassword": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "username": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "superAdmin",
        "username"
      ],
      "type": "object"
    },
    "distributorversion": {
      "xml": {
        "name": "distributorversion"
      },
      "properties": {
        "updated": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "capabilities": {
          "items": {
            "$ref": "#/definitions/distributorversioncapability"
          },
          "uniqueItems": true,
          "type": "array"
        },
        "displayName": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "name": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "required": [
        "displayName",
        "id",
        "name"
      ],
      "type": "object"
    },
    "NestedConsumer": {
      "properties": {
        "href": {
          "type": "string"
        },
        "name": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "uuid": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "uuid"
      ],
      "type": "object"
    },
    "ImportUpstreamConsumer": {
      "properties": {
        "updated": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "uuid": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "name": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/consumertype"
        },
        "ownerId": {
          "type": "string"
        },
        "apiUrl": {
          "type": "string"
        },
        "webUrl": {
          "type": "string"
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "ownerId",
        "type",
        "uuid"
      ],
      "type": "object"
    },
    "link": {
      "xml": {
        "name": "link"
      },
      "properties": {
        "length": {
          "xml": {
            "attribute": true
          },
          "type": "string"
        },
        "extensionAttributes": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        },
        "lang": {
          "xml": {
            "attribute": true,
            "namespace": "http://www.w3.org/XML/1998/namespace"
          },
          "type": "string"
        },
        "base": {
          "xml": {
            "attribute": true,
            "namespace": "http://www.w3.org/XML/1998/namespace"
          },
          "format": "uri",
          "type": "string"
        },
        "href": {
          "xml": {
            "attribute": true
          },
          "format": "uri",
          "type": "string"
        },
        "rel": {
          "xml": {
            "attribute": true
          },
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/MediaType"
        },
        "hreflang": {
          "xml": {
            "attribute": true
          },
          "type": "string"
        },
        "title": {
          "xml": {
            "attribute": true
          },
          "type": "string"
        }
      },
      "type": "object"
    },
    "generator": {
      "xml": {
        "name": "generator"
      },
      "properties": {
        "base": {
          "xml": {
            "attribute": true
          },
          "format": "uri",
          "type": "string"
        },
        "lang": {
          "xml": {
            "attribute": true
          },
          "type": "string"
        },
        "version": {
          "xml": {
            "attribute": true
          },
          "type": "string"
        },
        "uri": {
          "xml": {
            "attribute": true
          },
          "format": "uri",
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProductAttribute": {
      "properties": {
        "updated": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "value": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "name": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "Branding": {
      "properties": {
        "updated": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "type": {
          "maxLength": 32,
          "minLength": 0,
          "type": "string"
        },
        "name": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "productId": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "name",
        "productId",
        "type"
      ],
      "type": "object"
    },
    "Source": {
      "properties": {
        "base": {
          "xml": {
            "attribute": true,
            "namespace": "http://www.w3.org/XML/1998/namespace"
          },
          "format": "uri",
          "type": "string"
        },
        "lang": {
          "xml": {
            "attribute": true,
            "namespace": "http://www.w3.org/XML/1998/namespace"
          },
          "type": "string"
        },
        "extensionAttributes": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        },
        "generator": {
          "$ref": "#/definitions/generator"
        },
        "logo": {
          "format": "uri",
          "type": "string"
        },
        "icon": {
          "format": "uri",
          "type": "string"
        },
        "rights": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "subtitle": {
          "type": "string"
        },
        "categories": {
          "items": {
            "$ref": "#/definitions/category"
          },
          "type": "array"
        },
        "updated": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "format": "uri",
          "type": "string"
        },
        "links": {
          "items": {
            "$ref": "#/definitions/link"
          },
          "type": "array"
        },
        "author": {
          "items": {
            "$ref": "#/definitions/Person"
          },
          "type": "array"
        },
        "contributor": {
          "items": {
            "$ref": "#/definitions/Person"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "content": {
      "xml": {
        "name": "content"
      },
      "properties": {
        "type": {
          "xml": {
            "attribute": true
          },
          "type": "string"
        },
        "src": {
          "xml": {
            "attribute": true
          },
          "format": "uri",
          "type": "string"
        },
        "base": {
          "xml": {
            "attribute": true,
            "namespace": "http://www.w3.org/XML/1998/namespace"
          },
          "format": "uri",
          "type": "string"
        },
        "lang": {
          "xml": {
            "attribute": true,
            "namespace": "http://www.w3.org/XML/1998/namespace"
          },
          "type": "string"
        },
        "value": {
          "items": {
            "type": "object"
          },
          "type": "array"
        },
        "extensionAttributes": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "JobStatus": {
      "properties": {
        "updated": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "group": {
          "type": "string"
        },
        "done": {
          "default": false,
          "type": "boolean"
        },
        "statusPath": {
          "type": "string"
        },
        "resultData": {
          "type": "object"
        },
        "ownerId": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "id": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "state": {
          "enum": [
            "CREATED",
            "PENDING",
            "RUNNING",
            "FINISHED",
            "CANCELED",
            "FAILED",
            "WAITING"
          ],
          "type": "string"
        },
        "startTime": {
          "format": "date-time",
          "type": "string"
        },
        "finishTime": {
          "format": "date-time",
          "type": "string"
        },
        "result": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "principalName": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "targetType": {
          "type": "string"
        },
        "targetId": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "AKPoolData": {
      "properties": {
        "quantity": {
          "format": "int64",
          "type": "integer"
        },
        "poolId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ConsumptionTypeCounts": {
      "properties": {
        "guest": {
          "format": "int32",
          "type": "integer"
        },
        "physical": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "distributorversioncapability": {
      "xml": {
        "name": "distributorversioncapability"
      },
      "properties": {
        "name": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "name"
      ],
      "type": "object"
    },
    "PrincipalData": {
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PermissionBlueprint": {
      "properties": {
        "updated": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "type": {
          "enum": [
            "OWNER",
            "OWNER_POOLS",
            "USERNAME_CONSUMERS",
            "USERNAME_CONSUMERS_ENTITLEMENTS",
            "ATTACH"
          ],
          "type": "string"
        },
        "access": {
          "enum": [
            "NONE",
            "READ_ONLY",
            "CREATE",
            "ALL"
          ],
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/NestedOwner"
        },
        "id": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "owner",
        "type"
      ],
      "type": "object"
    },
    "ContentOverride": {
      "properties": {
        "updated": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "value": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "name": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "contentLabel": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        }
      },
      "required": [
        "contentLabel",
        "name",
        "value"
      ],
      "type": "object"
    },
    "Release": {
      "properties": {
        "updated": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "releaseVer": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SchedulerStatus": {
      "properties": {
        "running": {
          "default": false,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PoolIdAndQuantity": {
      "properties": {
        "quantity": {
          "format": "int32",
          "type": "integer"
        },
        "poolId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ConsumerInstalledProduct": {
      "properties": {
        "updated": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "created": {
          "readOnly": true,
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "productId": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "productName": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "version": {
          "maxLength": 20,
          "minLength": 0,
          "type": "string"
        },
        "arch": {
          "maxLength": 63,
          "minLength": 0,
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        },
        "endDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "id",
        "productId"
      ],
      "type": "object"
    }
  }
}
